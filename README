GDOT - waiting for the dead-simple dotfile manager
==================================================

Gdot is an extremely small deployment tool that uses Git as its back-end.
It only has a few commands and relies on Git commands for most of the actual
work.

The workflow with this tool will require you to track a file, thus adding it
to a git repository and creating a symbolic link in its place, and then commit
any changes to that file as you normally would with Git.


INSTALL
-------

At this point the only thing to do is to copy the actual `gdot` file somewhere
in your `$PATH`. `$HOME/bin/` or `/usr/local/bin/` are good places.

At some later point Gdot might have an actual Makefile for this and other
things.


CONFIGURE
---------

Gdot configuration happens in the work tree which is usually located in
`$HOME/.gdot/`.

`.gdotignore`::
        should contain any files and directories you do not want to traverse.
        Please note that this is not a safety feature and does not stop
        `deploy` from putting files there.
        But it does stop `status` and any `clean` from traversing the whole
        deploy tree and as such is meant to save you time.


USE
---

`init`::
        will create an empty Gdot repository or reinitialize an existing one.
        This is how you bootstrap your Gdot setup.

`status`::
        will show you the status of the symlink setup. It will however not
        show any changes to the content.
        This command will traverse the whole deploy tree and as such will take
        some time.

`track`::
        will add a file to the repository and put a symlink in its place.

`untrack`::
        will remove the file from the repository and the symlink to this file
        and restore it to its place.
        This command will automatically clean.

`deploy`::
        will create symlinks to files in the repository if necessary.
        You probably want to call this every time you check out or merge for
        example.
        This command will automatically clean.

`clean`::
        will clean the deploy tree from broken or renamed symlinks that point
        to the repository.
        This command will traverse the whole deploy tree and as such will take
        some time.

`git`::
        You will need git for anything else as the actual repository is still
        just a regular git repository.
        This command is a convenient wrapper that executes any command given
        to it in the Gdot repository.


CONTRIBUTE
----------

This project follows the Git documentation unless stated otherwise.
https://git.kernel.org/cgit/git/git.git/tree/Documentation
