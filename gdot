#!/bin/sh

# GDOT - waiting for the dead-simple dotfile manager
# See README.md for documentation.
#
# Copyright Â© 2014 Enno Weichert <enno.weichert@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see http://www.gnu.org/licenses/ .

export GDOT_DEPLOY_DIR=$HOME
export GIT_WORK_TREE=$GDOT_DEPLOY_DIR/.gdot
export GIT_DIR=$GIT_WORK_TREE/.git

version="0.0.0"

die () {
	printf "$*" >&2
	exit 1
}

ls_files () {
#
# TODO:
#
# status
# 	no-links
# 	broken-links
# 	moved-links
# 	conflicts
#
# clean
# 	broken-links
# 	moved-links
#
#
# mkfifo - named pipe
#
# showing all valid links recursively is default
#
# find all symlinks to work tree in deploy tree
# 	no file in work tree >> named pipe (broken symlink)
# 	different file in work tree >> named pipe (moved symlink)
#
# find all files in work tree
# 	link in deploy tree links to right file in work tree >> named pipe (valid)
# 	no file in deploy tree >> named pipe (no symlink)
# 	file in deploy tree not a link >> named pipe (conflict)
# 	link in deploy tree links outside work tree >> named pipe (conflict)
#
	usage_string="usage: gdot ls-files [<options>...]\n"
	long_usage_string=\
""$usage_string"
Options:
   --broken     
   --conflicts  
   --help       display this help
   --ignored    
   --mkfifo     
   --moved      
   --missing    
   --valid      \n"
	broken=f
	conflicts=f
	ignored=f
	mkfifo=f
	moved=f
	missing=f
	test $# = 0 && valid=t || valid=f

	while test $# != 0
	do
		case "$1" in
		--broken)
			broken=t
			shift ;;
		--conflicts)
			conflicts=t
			shift ;;
		--help)
			printf "$long_usage_string"
			return 0 ;;
		--ignored)
			ignored=t
			shift ;;
		--mkfifo)
			mkfifo=t
			shift ;;
		--moved)
			moved=t
			shift ;;
		--missing)
			missing=t
			shift ;;
		--valid)
			valid=t
			shift ;;
		-*|--*)
			die "Unknown option: "$1"\n"$usage_string"" ;;
		*)
			die "Unknown argument: "$1"\n"$usage_string"" ;;
		esac
	done

	if test $ignored = f
	then
		# TODO: Build $ignorepattern from .gdotignore ("! -name <LINE> ")
	fi

	if test $conflicts = t -o $missing = t -o $valid = t
	then
		# TODO: find . ! \( -path $GIT_DIR -prune \) -type f -o -type l $ignorepattern
	fi

	if test $broken = t -o $moved = t
	then
		# TODO: deploy-dir find pattern
	fi


	return 0
}

clean () {
	# TODO: --ignored  traverse ignored files and directories
	return 0
}

deploy () {
	# TODO: --clean
	return 0
}

__git () {
	git "$@"
	return $?
}

#
#  INIT COMMAND
#

init () {
	usage_string="usage: gdot init [<options>...]\n"
	long_usage_string=\
""$usage_string"
Options:
   --help     display this help\n"

	while test $# != 0
	do
		echo $#
		case "$1" in
		--help)
			printf "$long_usage_string"
			return 0 ;;
		-*|--*)
			die "Unknown option: "$1"\n"$usage_string"" ;;
		*)
			die "Unknown argument: "$1"\n"$usage_string"" ;;
		esac
	done
	__git init $GIT_WORK_TREE
	return $?
}

#
#  STATUS COMMAND
#

status () {
	usage_string="usage: gdot status [<options>...] [--] [<file>...]\n"
	long_usage_string=\
""$usage_string"
Options:
   --help     display this help
   --ignored  traverse ignored files and directories\n"
	ignored=false

	while test $# != 0
	do
		case "$1" in
		--help)
			printf "$long_usage_string"
			exit 0 ;;
		--ignored)
			ignored=true
			shift ;;
		--)
			shift
			break ;;
		-*|--*)
			die "Unknown option: "$1"\n"$usage_string"" ;;
		*)
			break ;;
		esac
	done

	# TODO: Mockup to learn about terminfo stuff and understand what you
	#       would want from the UI

	printf \
"No symbolic links found:
  There are files in the work tree but there are no corresponding symbolic
  links in the deploy tree.
  (use \"gdot deploy\" to update all symbolic links)
$(tput setaf 1)
    ?? -> .vim
$(tput sgr0)\n"
	printf \
"Broken symbolic links found:
  There are symbolic links in the deploy tree but there are no corresponding
  files in the work tree.
  (use \"gdot clean\" to clean up invalid links in your deploy tree)
$(tput setaf 1)
    .profile -> ??
$(tput sgr0)\n"
	printf \
"Moved symbolic links found:
  There are symbolic links in the deploy tree linking to existing files in the
  work tree but they are in unexpected places or have unexpected names.
  (use \"gdot deploy --clean\" to clean up and update all symbolic links)
$(tput setaf 1)
    .testfile -> .bashrc
$(tput sgr0)\n"
	printf \
"Conflicting files found:
  There are files in the work tree and files in corresponding places in the
  deploy tree. Refer to the documentation on how to resolve conflicts.
  (use \"gdot git commit\" to commit any changes)
  (use \"gdot deploy\" to update all symbolic links)
$(tput setaf 1)
    .screenrc
$(tput sgr0)\n"
	return 0
}

track () {
	return 0
}

untrack () {
	# TODO: --clean
	return 0
}

#
#  MAIN UI ROUTER
#

usage_string="usage: gdot [--version] [--help] <command> [<args>]\n"
long_usage_string=\
""$usage_string"
Commands:
   clean     Clean deployment tree from broken or renamed symlinks
   deploy    Deploy a working tree into the deployment tree
   git       Executes any git command given to it in the gdot repository
   init      Create an empty gdot repository
   status    Show the deployment tree status
   track     Add files to the repository and start following changes
   untrack   Remove files from the repository and stop following changes\n"

if test $# != 0
then
	case "$1" in
	--version)
		printf "gdot version $version\n"
		exit 0 ;;
	--help)
		case "$2" in
		clean)
			clean --help
			exit $?;;
		deploy)
			deploy --help
			exit $?;;
		init)
			init --help
			exit $?;;
		ls-files)
			ls_files --help
			exit $?;;
		status)
			status --help
			exit $?;;
		track)
			track --help
			exit $?;;
		untrack)
			untrack --help
			exit $?;;
		*)
			printf "$long_usage_string"
			exit 0 ;;
		esac
		;;
	-*|--*)
		die "Unknown option: "$1"\n"$usage_string"" ;;
	clean)
		shift
		clean "$@"
		exit $?;;
	deploy)
		shift
		deploy "$@"
		exit $?;;
	git)
		shift
		__git "$@"
		exit $?;;
	init)
		shift
		init "$@"
		exit $?;;
	ls-files)
		shift
		ls_files "$@"
		exit $?;;
	status)
		shift
		status "$@"
		exit $?;;
	track)
		shift
		track "$@"
		exit $?;;
	untrack)
		shift
		untrack "$@"
		exit $?;;
	*)
		die "gdot: '"$1"' is not a gdot command. See 'gdot --help'.\n" ;;
	esac
else
	die "$long_usage_string"
fi
