#!/bin/sh

# GDOT - waiting for the dead-simple dotfile manager
# See README.md for documentation.
#
# Copyright Â© 2014 Enno Weichert <enno.weichert@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see http://www.gnu.org/licenses/ .

export GDOT_DEPLOY_DIR=$HOME
export GIT_WORK_TREE=$GDOT_DEPLOY_DIR/.gdot
export GIT_DIR=$GIT_WORK_TREE/.git

die () {
	printf "$*" >&2
	exit 1
}

find_symlinks () {

	return 0
}

clean_command () {
	# TODO: --ignored  traverse ignored files and directories
	return 0
}

deploy_command () {
	# TODO: --clean
	return 0
}

git_command () {
	git "$@"
	return $?
}

#
#  INIT COMMAND
#

init_command () {
	usage_string="usage: gdot init [<options>...]\n"
	long_usage_string=\
""$usage_string"
Options:
   --help     display this help\n"

	while test -n $#
	do
		case "$1" in
		--help)
			printf "$long_usage_string"
			return 0 ;;
		-*|--*)
			die "Unknown option: "$1"\n"$usage_string"" ;;
		*)
			die "Unknown argument: "$1"\n"$usage_string"" ;;
		esac
	done
	git init $GIT_WORK_TREE
	return $?
}

#
#  STATUS COMMAND
#

status_command () {
	usage_string="usage: gdot status [<options>...] [--] [<file>...]\n"
	long_usage_string=\
""$usage_string"
Options:
   --help     display this help
   --ignored  traverse ignored files and directories\n"
	ignored=false

	while test -n $#
	do
		case "$1" in
		--help)
			printf "$long_usage_string"
			exit 0 ;;
		--ignored)
			ignored=true
			shift ;;
		--)
			shift
			break ;;
		-*|--*)
			die "Unknown option: "$1"\n"$usage_string"" ;;
		*)
			break ;;
		esac
	done

	# TODO: Mockup to learn about terminfo stuff and understand what you
	#       would want from the UI

	printf \
"No symbolic links found:
  There are files in the work tree but there are no corresponding symbolic
  links in the deploy tree.
  (use \"gdot deploy\" to update all symbolic links)
$(tput setaf 1)
    ?? -> .vim
$(tput sgr0)\n"
	printf \
"Broken symbolic links found:
  There are symbolic links in the deploy tree but there are no corresponding
  files in the work tree.
  (use \"gdot clean\" to clean up invalid links in your deploy tree)
$(tput setaf 1)
    .profile -> ??
$(tput sgr0)\n"
	printf \
"Moved symbolic links found:
  There are symbolic links in the deploy tree linking to existing files in the
  work tree but they are in unexpected places or have unexpected names.
  (use \"gdot deploy --clean\" to clean up and update all symbolic links)
$(tput setaf 1)
    .testfile -> .bashrc
$(tput sgr0)\n"
	printf \
"Conflicting files found:
  There are files in the work tree and files in corresponding places in the
  deploy tree. Refer to the documentation on how to resolve conflicts.
  (use \"gdot git commit\" to commit any changes)
  (use \"gdot deploy\" to update all symbolic links)
$(tput setaf 1)
    .screenrc
$(tput sgr0)\n"
	return 0
}

track_command () {
	return 0
}

untrack_command () {
	# TODO: --clean
	return 0
}

#
#  MAIN UI ROUTER
#

version="0.0.0"
usage_string="usage: gdot [--version] [--help] <command> [<args>]\n"
long_usage_string=\
""$usage_string"
Commands:
   clean     Clean deployment tree from broken or renamed symlinks
   deploy    Deploy a working tree into the deployment tree
   git       Executes any git command given to it in the gdot repository
   init      Create an empty gdot repository
   status    Show the deployment tree status
   track     Add files to the repository and start following changes
   untrack   Remove files from the repository and stop following changes\n"

if test -n $#
then
	case "$1" in
	--version)
		printf "gdot version $version\n"
		exit 0 ;;
	--help)
		case "$2" in
		clean)
			clean_command --help
			exit $?;;
		deploy)
			deploy_command --help
			exit $?;;
		init)
			init_command --help
			exit $?;;
		status)
			status_command --help
			exit $?;;
		track)
			track_command --help
			exit $?;;
		untrack)
			untrack_command --help
			exit $?;;
		*)
			printf "$long_usage_string"
			exit 0 ;;
		esac
		;;
	-*|--*)
		die "Unknown option: "$1"\n"$usage_string"" ;;
	clean)
		shift
		clean_command "$@" 
		exit $?;;
	deploy)
		shift
		deploy_command "$@"
		exit $?;;
	git)
		shift
		git_command "$@"
		exit $?;;
	init)
		shift
		init_command "$@"
		exit $?;;
	status)
		shift
		status_command "$@"
		exit $?;;
	track)
		shift
		track_command "$@"
		exit $?;;
	untrack)
		shift
		untrack_command "$@"
		exit $?;;
	*)
		die "gdot: '"$1"' is not a gdot command. See 'gdot --help'.\n" ;;
	esac
else
	die "$long_usage_string"
fi
