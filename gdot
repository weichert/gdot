#!/bin/sh

# GDOT - waiting for the dead-simple dotfile manager
# See README for general documentation.
#
# Copyright Â© 2014 Enno Weichert <enno.weichert@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see http://www.gnu.org/licenses/ .

version="0.0.0"

export GDOT_DEPLOY_TREE=$HOME
export GIT_WORK_TREE=$GDOT_DEPLOY_TREE/.gdot
export GIT_DIR=$GIT_WORK_TREE/.git

set -o errexit
set -o nounset

die () {
	errcode=$1; shift
	message="$@"

	printf "$message" 1>&2
	exit $errcode
}

# conflicts, missing, valid
# -----------------------
#
# TODO: find . ! \( -path $GIT_DIR -prune \) -type f -o -type l $ignorepattern
# mkfifo for named pipes
# xargs to expand ignorepatterns
# find -exec and maybe xargs to do anything with found files
#
# broken, moved
# ------------
#
# TODO: deploy-dir find pattern
#
# ignore = $1 = t
# ---------------
#
# TODO: Build $ignorepattern from .gdotignore ("! -name <LINE> ")
# sed to edit the single entries in file to complete arguments for find


get_broken_files () {
	echo broken files
}

get_conflicting_files () {
	echo conflicting files
}

get_ignored_files () {
	echo ignored files
}

get_moved_files () {
	echo moved files
}

get_missing_files () {
	echo missing files
}

get_valid_files () {
	echo valid files
}

cmd_clean () {
	# TODO: --ignored  traverse ignored files and directories
	#
	#       broken-links
	#       moved-links
	return 0
}

cmd_deploy () {
	# TODO: --clean
	return 0
}

cmd_git () {
	git "$@"
	return $?
}

cmd_init () {
	usage_string="usage: gdot init [<options>...]\n"
	long_usage_string=\
""$usage_string"
Options:
   --help     display this help\n"

	while test $# -gt 0
	do
		echo $#
		case "$1" in
		--help)
			printf "$long_usage_string"
			return 0 ;;
		-*|--*)
			die 1 "Unknown option: "$1"\n"$usage_string"" ;;
		*)
			die 1 "Unknown argument: "$1"\n"$usage_string"" ;;
		esac
	done
	__git init $GIT_WORK_TREE
	return $?
}

cmd_ls_files () {
	usage_string="usage: gdot ls-files [--ignored] [<options>...]\n"
	long_usage_string=\
""$usage_string"
Files are said to correspond if they exist in the same place relative to their
respective roots \$GDOT_DEPLOY_TREE and \$GIT_WORK_TREE.

Options:
   --broken     Show all symbolic links in the deploy tree that point to a file
                that does not exist in the work tree.
   --conflicts  Show all files in the deploy tree that correspond to a file in
                the work tree but are not symbolic links to this file.
   --help       Display this help.
   --ignored    Show ignored files as well.
   --moved      Show all symbolic links in the deploy tree that do not
                correspond to a file in the work tree but still point to it.
   --missing    Show all files in the work tree that have no symbolic link
                pointing to them in the deploy tree.
   --valid      Show all valid symbolic links.
                This is the default if no argument is given.\n"
	ignored=f

	if test $# -eq 0
	then
		get_valid_files
		return 0
	fi

	while test $# -gt 0
	do
		case "$1" in
		--broken)
			get_broken_files $ignored
			shift ;;
		--conflicts)
			get_conflicting_files $ignored
			shift ;;
		--help)
			printf "$long_usage_string"
			return 0 ;;
		--ignored)
			ignored=t
			shift ;;
		--moved)
			get_moved_files $ignored
			shift ;;
		--missing)
			get_missing_files $ignored
			shift ;;
		--valid)
			get_valid_files $ignored
			shift ;;
		-*|--*)
			die 1 "Unknown option: "$1"\n"$usage_string"" ;;
		*)
			die 1 "Unknown argument: "$1"\n"$usage_string"" ;;
		esac
	done

	return 0
}

cmd_status () {
	usage_string="usage: gdot status [<options>...] [--] [<file>...]\n"
	long_usage_string=\
""$usage_string"
Options:
   --help     display this help
   --ignored  traverse ignored files and directories\n"
	ignored=false

	while test $# -gt 0
	do
		case "$1" in
		--help)
			printf "$long_usage_string"
			exit 0 ;;
		--ignored)
			ignored=true
			shift ;;
		--)
			shift
			break ;;
		-*|--*)
			die 1 "Unknown option: "$1"\n"$usage_string"" ;;
		*)
			break ;;
		esac
	done

	# TODO: Mockup to learn about terminfo stuff and understand what you
	#       would want from the UI
	#
	#       no-links
	#       broken-links
	#       moved-links
	#       conflicts


	printf \
"No symbolic links found:
  There are files in the work tree but there are no corresponding symbolic
  links in the deploy tree.
  (use \"gdot deploy\" to update all symbolic links)
$(tput setaf 1)
    ?? -> .vim
$(tput sgr0)\n"
	printf \
"Broken symbolic links found:
  There are symbolic links in the deploy tree but there are no corresponding
  files in the work tree.
  (use \"gdot clean\" to clean up invalid links in your deploy tree)
$(tput setaf 1)
    .profile -> ??
$(tput sgr0)\n"
	printf \
"Moved symbolic links found:
  There are symbolic links in the deploy tree linking to existing files in the
  work tree but they are in unexpected places or have unexpected names.
  (use \"gdot deploy --clean\" to clean up and update all symbolic links)
$(tput setaf 1)
    .testfile -> .bashrc
$(tput sgr0)\n"
	printf \
"Conflicting files found:
  There are files in the work tree and files in corresponding places in the
  deploy tree. Refer to the documentation on how to resolve conflicts.
  (use \"gdot git commit\" to commit any changes)
  (use \"gdot deploy\" to update all symbolic links)
$(tput setaf 1)
    .screenrc
$(tput sgr0)\n"
	return 0
}

cmd_track () {
	return 0
}

cmd_untrack () {
	# TODO: --clean
	return 0
}

usage_string="usage: gdot [--version] [--help] <command> [<args>]\n"
long_usage_string=\
""$usage_string"
Commands:
   clean     Clean deployment tree from broken or renamed symlinks
   deploy    Deploy a working tree into the deployment tree
   git       Executes any git command given to it in the gdot repository
   init      Create an empty gdot repository
   status    Show the deployment tree status
   track     Add files to the repository and start following changes
   untrack   Remove files from the repository and stop following changes\n"

if test $# -gt 0
then
	case "$1" in
	--version)
		printf "gdot version $version\n"
		exit 0 ;;
	--help)
		if test -n "${2-}"
		then
			case "$2" in
			clean)
				cmd_clean --help
				exit $?;;
			deploy)
				cmd_deploy --help
				exit $?;;
			init)
				cmd_init --help
				exit $?;;
			ls-files)
				cmd_ls_files --help
				exit $?;;
			status)
				cmd_status --help
				exit $?;;
			track)
				cmd_track --help
				exit $?;;
			untrack)
				cmd_untrack --help
				exit $?;;
			*)
				printf "$long_usage_string"
				exit 0 ;;
			esac
		else
			printf "$long_usage_string"
			exit 0
		fi
		;;
	-*|--*)
		die 1 "Unknown option: "$1"\n"$usage_string"" ;;
	clean)
		shift
		cmd_clean "$@"
		exit $?;;
	deploy)
		shift
		cmd_deploy "$@"
		exit $?;;
	git)
		shift
		cmd_git "$@"
		exit $?;;
	init)
		shift
		cmd_init "$@"
		exit $?;;
	ls-files)
		shift
		cmd_ls_files "$@"
		exit $?;;
	status)
		shift
		cmd_status "$@"
		exit $?;;
	track)
		shift
		cmd_track "$@"
		exit $?;;
	untrack)
		shift
		cmd_untrack "$@"
		exit $?;;
	*)
		die 1 "gdot: '"$1"' is not a gdot command. See 'gdot --help'.\n" ;;
	esac
else
	die 1 "$long_usage_string"
fi
